@using Laser.Orchard.Cookies;
@using Laser.Orchard.Cookies.Services
@{
    Style.Require("CookieCuttr");
    // I cannot defer loading the CookieCuttr script, because the inline script below is parsed
    // before the DOMLoadedEvent
    Script.Require("CookieCuttr");

    var settings = Model.CookieSettings;
    var part = Model.CookieLawPart;
    var siteName = Model.siteName;
    var iconUrl = Model.iconUrl;
    var cookieResetButton = settings.showCookieResetButton.ToString().ToLower();
    var cookieDiscreetReset = settings.cookieDiscreetReset.ToString().ToLower();

    // banner position
    var cookieOverlayEnabled = "true";
    var cookieDiscreetPosition = "";
    var cookieNotificationLocationBottom = "false";
    switch (settings.cookiePosition)
    {
        case CookieBannerPosition.Top:
            cookieOverlayEnabled = "false";
            cookieDiscreetPosition = "top";
            cookieNotificationLocationBottom = "false";
            break;
        case CookieBannerPosition.Bottom:
            cookieOverlayEnabled = "false";
            cookieDiscreetPosition = "bottom";
            cookieNotificationLocationBottom = "true";
            break;
        default: // Overlay
            cookieOverlayEnabled = "true";
            cookieDiscreetPosition = "";
            cookieNotificationLocationBottom = "false";
            break;
    }

    var gdprScriptService = Model.GDPRScriptservice;
    var isPolicyPage = Model.isPolicyPage;

    using (Script.Foot())
    {
        if (settings.DisableCookieGDPRManagement == false)
        {
<script type="text/javascript">
$(document).ready(function() {
    var cookiesettings = { };
    //cookiesettings.cookieTitle = "@(((dynamic)part).Title)";
    if (@(part.cookieMessage.Length) > 0)
        cookiesettings.cookieMessage = '@Html.Raw(part.cookieMessage.Replace(System.Environment.NewLine, "<br/>"))';
        if ('@part.cookiePolicyLink'.length > 0)
            cookiesettings.cookiePolicyLink = '@part.cookiePolicyLink';
        cookiesettings.cookieMessage = cookiesettings.cookieMessage + "<p id=\"ccPolicyMsgLink\"><a href=\"" + cookiesettings.cookiePolicyLink + "\">@part.cookiePolicyPageMessage</a></p>";
        // user options
        cookiesettings.cookieMessage = cookiesettings.cookieMessage + '<form><div style="display:inline-block;margin:auto;clear:both;width:100%"><div class="cc-cookie-checks">';
        cookiesettings.cookieMessage = cookiesettings.cookieMessage + '@Html.Raw(gdprScriptService.GetBannerChoices())';
        cookiesettings.cookieMessage = cookiesettings.cookieMessage + '</div></div></form>';
        // positioning
        cookiesettings.cookieNotificationLocationBottom = @cookieNotificationLocationBottom;
        cookiesettings.cookieDiscreetReset = @cookieDiscreetReset;
        if ('@settings.cookieDiscreetPosition'.length > 0)
            cookiesettings.cookieDiscreetPosition = '@settings.cookieDiscreetPosition';
        // buttons
        cookiesettings.cookieAcceptButton = true;
        if ('@part.cookieAcceptButtonText'.length > 0)
            cookiesettings.cookieAcceptButtonText = '@part.cookieAcceptButtonText';
        cookiesettings.cookieDeclineButton = false;
        cookiesettings.cookieResetButton = @cookieResetButton;
        if ('@part.cookieResetButtonText'.length > 0)
            cookiesettings.cookieResetButtonText = '@part.cookieResetButtonText';
        cookiesettings.cookieExpectedValue = "@Html.Raw(gdprScriptService.GetCurrentCookiePrefix())";
        cookiesettings.cookieAccepted = (@gdprScriptService.IsCookieAccepted() == 1);
        if (@isPolicyPage) {
            cookiesettings.cookiePolicyPage = true;
            cookiesettings.cookieOverlayEnabled = false;
        }
        else {
            cookiesettings.cookieOverlayEnabled = @cookieOverlayEnabled;
        }
        cookiesettings.cookiePoweredBy = "@siteName";
        cookiesettings.cookiePoweredByIcon = "@iconUrl";
        $.cookieCuttr(cookiesettings);
    });
</script>
        }

        foreach (var cookie in gdprScriptService.GetAllowedCookies())
        {
            <text>@Html.Raw(cookie.GetScript(gdprScriptService.GetAcceptedCookieTypes())) </text>
        }
    }
}
