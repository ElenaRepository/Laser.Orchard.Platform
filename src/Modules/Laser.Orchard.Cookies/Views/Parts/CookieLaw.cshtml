@using Laser.Orchard.Cookies.Services
@{
    Style.Require("CookieCuttr");
    // I cannot defer loading the CookieCuttr script, because the inline script below is parsed
    // before the DOMLoadedEvent
    Script.Require("CookieCuttr");

    var settings = Model.CookieSettings;
    var part = Model.CookieLawPart;
    var cookieAnalytics = settings.cookieAnalytics.ToString().ToLower();
    var cookieNotificationLocationBottom = settings.cookieNotificationLocationBottom.ToString().ToLower();
    var cookieAcceptButton = settings.showCookieAcceptButton.ToString().ToLower();
    var cookieDeclineButton = settings.showCookieDeclineButton.ToString().ToLower();
    var cookieResetButton = settings.showCookieResetButton.ToString().ToLower();
    var cookieDiscreetReset = settings.cookieDiscreetReset.ToString().ToLower();
    var cookieOverlayEnabled = settings.cookieOverlayEnabled.ToString().ToLower();
    var gdprScriptService = Model.GDPRScriptservice;
    var isPolicyPage = Model.isPolicyPage;

    using (Script.Foot()) {
        if (settings.DisableCookieGDPRManagement == false) {
            <script type="text/javascript">
    $(document).ready(function () {
        var cookiesettings = {};
        cookiesettings.cookieAnalytics = @cookieAnalytics;
        if (cookiesettings.cookieAnalytics) {
            if ('@part.cookieAnalyticsMessage.Replace(System.Environment.NewLine, "")'.length > 0)
            {
                var analyticsMessage = '@Html.Raw(part.cookieAnalyticsMessage.Replace(System.Environment.NewLine, "{{space}}"))';
                cookiesettings.cookieAnalyticsMessage = analyticsMessage.replace("{{space}}", "<br/>");
            }
            if ('@part.cookieWhatAreLinkText'.length > 0)
                cookiesettings.cookieWhatAreLinkText = '@part.cookieWhatAreLinkText';
            if ('@part.cookieWhatAreTheyLink'.length > 0)
                cookiesettings.cookieWhatAreTheyLink = '@part.cookieWhatAreTheyLink';
        }
        else {
            if (@(part.cookieMessage.Length) > 0)
                cookiesettings.cookieMessage = '@Html.Raw(part.cookieMessage.Replace(System.Environment.NewLine, "<br/>"))';
            if ('@part.cookiePolicyLink'.length > 0)
                cookiesettings.cookiePolicyLink = '@part.cookiePolicyLink';
        }
        // user options
        cookiesettings.cookieMessage = cookiesettings.cookieMessage + '<form><div style="display:inline-block;margin:auto;clear:both;"><div style="float:left;margin:0 10px;">';
        cookiesettings.cookieMessage = cookiesettings.cookieMessage + '@Html.Raw(gdprScriptService.GetBannerChoices())';
        cookiesettings.cookieMessage = cookiesettings.cookieMessage + '</div></div></form>';
        // positioning
        cookiesettings.cookieNotificationLocationBottom = @cookieNotificationLocationBottom;
        cookiesettings.cookieDiscreetReset = @cookieDiscreetReset;
        if ('@settings.cookieDiscreetPosition'.length > 0)
            cookiesettings.cookieDiscreetPosition = '@settings.cookieDiscreetPosition';
        // buttons
        cookiesettings.cookieAcceptButton = @cookieAcceptButton;
        if ('@part.cookieAcceptButtonText'.length > 0)
            cookiesettings.cookieAcceptButtonText = '@part.cookieAcceptButtonText';
        cookiesettings.cookieDeclineButton = @cookieDeclineButton;
        if ('@part.cookieDeclineButtonText'.length > 0)
            cookiesettings.cookieDeclineButtonText = '@part.cookieDeclineButtonText';
        cookiesettings.cookieResetButton = @cookieResetButton;
        if ('@part.cookieResetButtonText'.length > 0)
            cookiesettings.cookieResetButtonText = '@part.cookieResetButtonText';
        cookiesettings.cookieExpectedValue = "@Html.Raw(gdprScriptService.GetCurrentCookiePrefix())";
        cookiesettings.cookieAccepted = (@gdprScriptService.IsCookieAccepted() == 1);
        if(@isPolicyPage){
            cookiesettings.cookieOverlayEnabled = false;
        } else {
            cookiesettings.cookieOverlayEnabled = @cookieOverlayEnabled;
        }

        $.cookieCuttr(cookiesettings);
    });
            </script>
        }

        foreach (var cookie in gdprScriptService.GetAllowedCookies()) {
            <text>@Html.Raw(cookie.GetScript(gdprScriptService.GetAcceptedCookieTypes()))</text>
        }
    }
}
